//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class crudF1Entities : DbContext
    {
        public crudF1Entities()
            : base("name=crudF1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Equipo> Equipoes { get; set; }
        public virtual DbSet<Piloto> Pilotoes { get; set; }
    
        public virtual int AddEquipo(string nombre, Nullable<int> numeroPatrocinadores, Nullable<int> numeroPilotos, Nullable<int> idPiloto, Nullable<decimal> costo)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var numeroPatrocinadoresParameter = numeroPatrocinadores.HasValue ?
                new ObjectParameter("NumeroPatrocinadores", numeroPatrocinadores) :
                new ObjectParameter("NumeroPatrocinadores", typeof(int));
    
            var numeroPilotosParameter = numeroPilotos.HasValue ?
                new ObjectParameter("NumeroPilotos", numeroPilotos) :
                new ObjectParameter("NumeroPilotos", typeof(int));
    
            var idPilotoParameter = idPiloto.HasValue ?
                new ObjectParameter("IdPiloto", idPiloto) :
                new ObjectParameter("IdPiloto", typeof(int));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("Costo", costo) :
                new ObjectParameter("Costo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEquipo", nombreParameter, numeroPatrocinadoresParameter, numeroPilotosParameter, idPilotoParameter, costoParameter);
        }
    
        public virtual int DeleteEquipo(Nullable<int> idEquipo)
        {
            var idEquipoParameter = idEquipo.HasValue ?
                new ObjectParameter("IdEquipo", idEquipo) :
                new ObjectParameter("IdEquipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEquipo", idEquipoParameter);
        }
    
        public virtual ObjectResult<GetAllEquipo_Result> GetAllEquipo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEquipo_Result>("GetAllEquipo");
        }
    
        public virtual ObjectResult<GetByIdEquipo_Result> GetByIdEquipo(Nullable<int> idEquipo)
        {
            var idEquipoParameter = idEquipo.HasValue ?
                new ObjectParameter("IdEquipo", idEquipo) :
                new ObjectParameter("IdEquipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetByIdEquipo_Result>("GetByIdEquipo", idEquipoParameter);
        }
    
        public virtual int UpdateEquipo(Nullable<int> idEquipo, string nombre, Nullable<int> numeroPatrocinadores, Nullable<int> numeroPilotos, Nullable<int> idPiloto, Nullable<decimal> costo)
        {
            var idEquipoParameter = idEquipo.HasValue ?
                new ObjectParameter("IdEquipo", idEquipo) :
                new ObjectParameter("IdEquipo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var numeroPatrocinadoresParameter = numeroPatrocinadores.HasValue ?
                new ObjectParameter("NumeroPatrocinadores", numeroPatrocinadores) :
                new ObjectParameter("NumeroPatrocinadores", typeof(int));
    
            var numeroPilotosParameter = numeroPilotos.HasValue ?
                new ObjectParameter("NumeroPilotos", numeroPilotos) :
                new ObjectParameter("NumeroPilotos", typeof(int));
    
            var idPilotoParameter = idPiloto.HasValue ?
                new ObjectParameter("IdPiloto", idPiloto) :
                new ObjectParameter("IdPiloto", typeof(int));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("Costo", costo) :
                new ObjectParameter("Costo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEquipo", idEquipoParameter, nombreParameter, numeroPatrocinadoresParameter, numeroPilotosParameter, idPilotoParameter, costoParameter);
        }
    
        public virtual ObjectResult<GetAllPiloto_Result> GetAllPiloto()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPiloto_Result>("GetAllPiloto");
        }
    }
}
